const OpenAI = require('openai');
const moment = require('moment');
const db = require('../config/db');

class HoroscopeGeneratorService {
  constructor() {
    // Initialize OpenAI only if API key is available
    if (process.env.OPENAI_API_KEY && process.env.OPENAI_API_KEY !== 'your_openai_api_key_here') {
      this.openai = new OpenAI({
        apiKey: process.env.OPENAI_API_KEY
      });
      this.enabled = true;
    } else {
      console.warn('‚ö†Ô∏è  OpenAI API key not configured - running in mock mode');
      this.openai = null;
      this.enabled = false;
    }
    
    this.signs = [
      'Aries', 'Tauro', 'G√©minis', 'C√°ncer', 'Leo', 'Virgo',
      'Libra', 'Escorpio', 'Sagitario', 'Capricornio', 'Acuario', 'Piscis'
    ];
    
    this.languages = [
      { code: 'es', name: 'espa√±ol' },
      { code: 'en', name: 'english' },
      { code: 'de', name: 'deutsch' },
      { code: 'fr', name: 'fran√ßais' },
      { code: 'it', name: 'italiano' },
      { code: 'pt', name: 'portugu√™s' }
    ];

    // Frases gen√©ricas prohibidas (para validaci√≥n de calidad)
    this.genericPhrases = [
      'today is a good day',
      'hoy es un buen d√≠a',
      'you will have success',
      'tendr√°s √©xito',
      'be positive',
      's√© positivo',
      'good luck',
      'buena suerte',
      'trust yourself',
      'conf√≠a en ti',
      'follow your heart',
      'sigue tu coraz√≥n'
    ];
  }

  /**
   * Generate daily horoscopes for all signs and languages
   */
  async generateDailyHoroscopes() {
    console.log('üåü Starting daily horoscope generation...');
    const date = moment().format('YYYY-MM-DD');
    const results = {
      success: 0,
      errors: 0,
      details: []
    };

    // Clean old daily horoscopes (keep only last 7 days)
    await this.cleanOldDailyHoroscopes();

    // Paralelizar generaci√≥n por signo (12 signos en paralelo)
    const signPromises = this.signs.map(async (sign) => {
      // Para cada signo, generar todos los idiomas en serie
      for (const language of this.languages) {
        try {
          const horoscope = await this.generateDailyHoroscope(sign, language, date);
          await this.storeDailyHoroscope(horoscope);

          results.success++;
          results.details.push({
            sign,
            language: language.code,
            status: 'generated'
          });

          // Small delay between languages for same sign
          await this.delay(100);

        } catch (error) {
          console.error(`Error generating daily horoscope for ${sign} ${language.code}:`, error.message);
          results.errors++;
          results.details.push({
            sign,
            language: language.code,
            status: 'error',
            error: error.message
          });
        }
      }
    });

    // Esperar que todos los signos terminen
    await Promise.all(signPromises);

    console.log(`‚úÖ Daily generation completed: ${results.success} success, ${results.errors} errors`);
    return results;
  }

  /**
   * Generate weekly horoscopes for all signs and languages
   */
  async generateWeeklyHoroscopes() {
    console.log('üìÖ Starting weekly horoscope generation...');
    const weekStart = moment().startOf('isoWeek').format('YYYY-MM-DD');
    const weekEnd = moment().endOf('isoWeek').format('YYYY-MM-DD');
    const results = {
      success: 0,
      errors: 0,
      details: []
    };

    // Clean old weekly horoscopes (keep only last 4 weeks)
    await this.cleanOldWeeklyHoroscopes();

    // Paralelizar generaci√≥n por signo (12 signos en paralelo)
    const signPromises = this.signs.map(async (sign) => {
      // Para cada signo, generar todos los idiomas en serie
      for (const language of this.languages) {
        try {
          const horoscope = await this.generateWeeklyHoroscope(sign, language, weekStart, weekEnd);
          await this.storeWeeklyHoroscope(horoscope);

          results.success++;
          results.details.push({
            sign,
            language: language.code,
            status: 'generated'
          });

          // Delay between languages for same sign
          await this.delay(200);

        } catch (error) {
          console.error(`Error generating weekly horoscope for ${sign} ${language.code}:`, error.message);
          results.errors++;
          results.details.push({
            sign,
            language: language.code,
            status: 'error',
            error: error.message
          });
        }
      }
    });

    // Esperar que todos los signos terminen
    await Promise.all(signPromises);

    console.log(`‚úÖ Weekly generation completed: ${results.success} success, ${results.errors} errors`);
    return results;
  }

  /**
   * Generate single daily horoscope using OpenAI with retry logic
   */
  async generateDailyHoroscope(sign, language, date) {
    // Return mock data if OpenAI is not enabled
    if (!this.enabled || !this.openai) {
      return this.getMockDailyHoroscope(sign, language, date);
    }

    const prompt = this.getDailyPrompt(sign, language.name, date);
    const maxRetries = 3;
    let lastError = null;

    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        console.log(`üìù Generating daily ${sign} ${language.code} (attempt ${attempt}/${maxRetries})`);

        const response = await this.openai.chat.completions.create({
          model: 'gpt-4o-mini', // gpt-4o-mini: m√°s r√°pido y barato, soporta json_object
          messages: [
            { role: 'system', content: prompt },
            { role: 'user', content: `Generate daily horoscope for ${sign} in ${language.name} for ${date}` }
          ],
          temperature: 0.8,
          max_tokens: 800,
          response_format: { type: 'json_object' }
        });

        const content = JSON.parse(response.choices[0].message.content);

        // Validar calidad del contenido
        const validation = this.validateHoroscopeQuality(content, sign);
        if (!validation.valid) {
          console.warn(`‚ö†Ô∏è Quality issues in daily ${sign} ${language.code}:`, validation.issues);
          // Continuar de todos modos, pero loggear
        } else {
          console.log(`‚úÖ Daily ${sign} ${language.code} generated with high quality`);
        }

        return {
          sign,
          language_code: language.code,
          date,
          content
        };

      } catch (error) {
        lastError = error;
        const isLastAttempt = attempt === maxRetries;

        console.error(`‚ùå Attempt ${attempt}/${maxRetries} failed for daily ${sign} ${language.code}:`, error.message);

        if (isLastAttempt) {
          console.error(`üö® All ${maxRetries} attempts failed for daily ${sign} ${language.code}`);
          throw error;
        }

        // Exponential backoff: 1s, 2s, 4s
        const backoffMs = Math.pow(2, attempt - 1) * 1000;
        console.log(`‚è≥ Retrying in ${backoffMs}ms...`);
        await new Promise(resolve => setTimeout(resolve, backoffMs));
      }
    }

    throw lastError;
  }

  /**
   * Generate single weekly horoscope using OpenAI with retry logic
   */
  async generateWeeklyHoroscope(sign, language, weekStart, weekEnd) {
    // Return mock data if OpenAI is not enabled
    if (!this.enabled || !this.openai) {
      return this.getMockWeeklyHoroscope(sign, language, weekStart, weekEnd);
    }

    const prompt = this.getWeeklyPrompt(sign, language.name, weekStart, weekEnd);
    const maxRetries = 3;
    let lastError = null;

    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        console.log(`üìÖ Generating weekly ${sign} ${language.code} (attempt ${attempt}/${maxRetries})`);

        const response = await this.openai.chat.completions.create({
          model: 'gpt-4o-mini', // gpt-4o-mini: m√°s r√°pido y barato, soporta json_object
          messages: [
            { role: 'system', content: prompt },
            { role: 'user', content: `Generate weekly horoscope for ${sign} in ${language.name} for week ${weekStart} to ${weekEnd}` }
          ],
          temperature: 0.8,
          max_tokens: 1200,
          response_format: { type: 'json_object' }
        });

        const content = JSON.parse(response.choices[0].message.content);

        // Validar calidad del contenido
        const validation = this.validateHoroscopeQuality(content, sign);
        if (!validation.valid) {
          console.warn(`‚ö†Ô∏è Quality issues in weekly ${sign} ${language.code}:`, validation.issues);
          // Continuar de todos modos, pero loggear
        } else {
          console.log(`‚úÖ Weekly ${sign} ${language.code} generated with high quality`);
        }

        return {
          sign,
          language_code: language.code,
          week_start: weekStart,
          week_end: weekEnd,
          content
        };

      } catch (error) {
        lastError = error;
        const isLastAttempt = attempt === maxRetries;

        console.error(`‚ùå Attempt ${attempt}/${maxRetries} failed for weekly ${sign} ${language.code}:`, error.message);

        if (isLastAttempt) {
          console.error(`üö® All ${maxRetries} attempts failed for weekly ${sign} ${language.code}`);
          throw error;
        }

        // Exponential backoff: 1s, 2s, 4s
        const backoffMs = Math.pow(2, attempt - 1) * 1000;
        console.log(`‚è≥ Retrying in ${backoffMs}ms...`);
        await new Promise(resolve => setTimeout(resolve, backoffMs));
      }
    }

    throw lastError;
  }

  /**
   * Validate horoscope content quality
   * Returns { valid: boolean, issues: string[] }
   */
  validateHoroscopeQuality(content, sign) {
    const issues = [];

    // Convertir todo a min√∫sculas para comparaci√≥n
    const textToCheck = JSON.stringify(content).toLowerCase();
    const signLower = sign.toLowerCase();

    // 1. Verificar que NO contenga frases gen√©ricas
    for (const phrase of this.genericPhrases) {
      if (textToCheck.includes(phrase.toLowerCase())) {
        issues.push(`Contains generic phrase: "${phrase}"`);
      }
    }

    // 2. Verificar que mencione el signo espec√≠fico
    if (!textToCheck.includes(signLower)) {
      issues.push(`Does not mention sign name: "${sign}"`);
    }

    // 3. Verificar longitud m√≠nima (al menos 100 caracteres)
    if (textToCheck.length < 100) {
      issues.push(`Content too short: ${textToCheck.length} characters`);
    }

    // 4. Verificar que tenga estructura JSON correcta
    if (!content.general && !content.love && !content.work && !content.health) {
      issues.push('Missing required content fields (general/love/work/health)');
    }

    return {
      valid: issues.length === 0,
      issues
    };
  }

  /**
   * Daily horoscope prompt (based on your original)
   */
  getDailyPrompt(sign, languageName, date) {
    // Caracter√≠sticas astrol√≥gicas profundas por signo
    const signTraits = {
      'Aries': 'elemento Fuego, planeta Marte, cualidades: valent√≠a, liderazgo, impulsividad, energ√≠a pionera, necesidad de acci√≥n',
      'Tauro': 'elemento Tierra, planeta Venus, cualidades: estabilidad, sensualidad, determinaci√≥n, amor por belleza, resistencia al cambio',
      'G√©minis': 'elemento Aire, planeta Mercurio, cualidades: comunicaci√≥n, curiosidad, versatilidad, dualidad, pensamiento r√°pido',
      'C√°ncer': 'elemento Agua, planeta Luna, cualidades: emotividad, intuici√≥n, protecci√≥n, nostalgia, necesidad de seguridad',
      'Leo': 'elemento Fuego, planeta Sol, cualidades: creatividad, generosidad, orgullo, necesidad de reconocimiento, liderazgo natural',
      'Virgo': 'elemento Tierra, planeta Mercurio, cualidades: perfeccionismo, an√°lisis, servicio, salud, atenci√≥n al detalle',
      'Libra': 'elemento Aire, planeta Venus, cualidades: equilibrio, diplomacia, est√©tica, relaciones, b√∫squeda de justicia',
      'Escorpio': 'elemento Agua, planeta Plut√≥n/Marte, cualidades: intensidad, transformaci√≥n, profundidad emocional, poder personal',
      'Sagitario': 'elemento Fuego, planeta J√∫piter, cualidades: expansi√≥n, filosof√≠a, aventura, optimismo, b√∫squeda de verdad',
      'Capricornio': 'elemento Tierra, planeta Saturno, cualidades: disciplina, ambici√≥n, responsabilidad, estructura, paciencia',
      'Acuario': 'elemento Aire, planeta Urano/Saturno, cualidades: innovaci√≥n, independencia, humanitarismo, originalidad, visi√≥n futura',
      'Piscis': 'elemento Agua, planeta Neptuno/J√∫piter, cualidades: compasi√≥n, intuici√≥n espiritual, creatividad, sensibilidad, conexi√≥n universal'
    };

    return `Eres "Cosmic Coach", un astr√≥logo profesional experto con conocimiento profundo de astrolog√≠a tradicional y psicol√≥gica.

üìå CONTEXTO ASTROL√ìGICO ESPECIALIZADO PARA ${sign.toUpperCase()}:
${signTraits[sign] || signTraits['Aries']}

Tu tarea: Generar un coaching diario **altamente personalizado** para ${sign} en idioma ${languageName}, fecha ${date}.

‚≠ê PRINCIPIOS ASTROL√ìGICOS A CONSIDERAR:
- Tr√°nsitos planetarios actuales y su impacto en ${sign}
- La energ√≠a natural del elemento y planeta regente
- Los desaf√≠os y fortalezas inherentes del signo
- Ciclos lunares y su influencia emocional
- Aspectos con otros planetas que afectan √°reas de vida

üéØ REQUISITOS DE CALIDAD:
1. NUNCA usar frases gen√©ricas que sirvan para cualquier signo
2. SIEMPRE mencionar caracter√≠sticas espec√≠ficas de ${sign}
3. Conectar el consejo con las cualidades naturales del signo
4. Ser pr√°ctico, espec√≠fico y aplicable al d√≠a actual
5. Tono emp√°tico pero profesional, como un astr√≥logo experto

Responde SOLO con este JSON (sin texto adicional):

{
  "sign": "${sign}",
  "language_code": "CODIGO_IDIOMA_CORRECTO",
  "date": "${date}",
  "coaching_focus": "2-4 palabras tema del d√≠a conectado a naturaleza de ${sign}",
  "ai_insight": "15-25 palabras sobre tr√°nsito astrol√≥gico actual relevante para ${sign}",
  "content": "80-120 palabras de coaching ESPEC√çFICO para ${sign}, mencionando sus cualidades naturales y c√≥mo usarlas hoy. NO gen√©rico.",
  "rating": "entero 3-5 basado en energ√≠a planetaria del d√≠a para ${sign}",
  "lucky_numbers": [int, int, int],
  "lucky_colors": ["color1", "color2"],
  "advice": "10-15 palabras de acci√≥n concreta aprovechando fortalezas de ${sign}",
  "content_type": "cosmic_coaching",
  "generated_at": "${date}"
}`;
  }

  /**
   * Weekly horoscope prompt (ENHANCED with astrological context)
   */
  getWeeklyPrompt(sign, languageName, weekStart, weekEnd) {
    // Reutilizar definiciones astrol√≥gicas del prompt diario
    const signTraits = {
      'Aries': 'Fuego/Marte: liderazgo natural, energ√≠a pionera, impulso competitivo, coraje en desaf√≠os',
      'Tauro': 'Tierra/Venus: construcci√≥n s√≥lida, placeres sensoriales, persistencia inquebrantable, necesidad de seguridad material',
      'G√©minis': 'Aire/Mercurio: mente vers√°til, comunicaci√≥n multifac√©tica, curiosidad intelectual, adaptabilidad social',
      'C√°ncer': 'Agua/Luna: profundidad emocional, instinto protector, memoria del pasado, necesidad de hogar',
      'Leo': 'Fuego/Sol: expresi√≥n creativa, necesidad de brillo, generosidad natural, liderazgo carism√°tico',
      'Virgo': 'Tierra/Mercurio: perfecci√≥n en detalles, servicio dedicado, an√°lisis meticuloso, mejora continua',
      'Libra': 'Aire/Venus: b√∫squeda de armon√≠a, diplomacia relacional, est√©tica refinada, justicia equilibrada',
      'Escorpio': 'Agua/Plut√≥n: transformaci√≥n profunda, poder emocional, regeneraci√≥n constante, investigaci√≥n de misterios',
      'Sagitario': 'Fuego/J√∫piter: expansi√≥n filos√≥fica, b√∫squeda de verdad, optimismo aventurero, visi√≥n global',
      'Capricornio': 'Tierra/Saturno: ambici√≥n estructurada, responsabilidad madura, logro a largo plazo, maestr√≠a profesional',
      'Acuario': 'Aire/Urano: innovaci√≥n revolucionaria, conciencia humanitaria, independencia intelectual, visi√≥n futurista',
      'Piscis': 'Agua/Neptuno: compasi√≥n universal, intuici√≥n m√≠stica, creatividad ilimitada, disoluci√≥n de fronteras'
    };

    return `Eres "Cosmic Coach", astr√≥logo profesional con especializaci√≥n en predicciones semanales basadas en tr√°nsitos planetarios.

üìå PERFIL ASTROL√ìGICO DE ${sign.toUpperCase()}:
${signTraits[sign] || signTraits['Aries']}

CONTEXTO TEMPORAL: Semana ${weekStart} a ${weekEnd}

üåü TU MISI√ìN: Crear predicci√≥n semanal ALTAMENTE PERSONALIZADA para ${sign} en ${languageName}.

‚ö° ENFOQUE ASTROL√ìGICO PROFESIONAL:
- Considera c√≥mo tr√°nsitos planetarios afectan ESPEC√çFICAMENTE a ${sign}
- Conecta cada √°rea de vida con cualidades naturales del signo
- Menciona fortalezas inherentes y c√≥mo aprovecharlas esta semana
- Identifica desaf√≠os t√≠picos de ${sign} y c√≥mo superarlos
- Usa lenguaje de astr√≥logo experto, no gen√©rico

üö´ PROHIBIDO:
- Frases que sirvan para cualquier signo
- Consejos gen√©ricos sin conexi√≥n al perfil de ${sign}
- Ignorar elemento (Fuego/Tierra/Aire/Agua) y planeta regente

Responde SOLO con JSON (sin texto antes/despu√©s):

{
  "sign": "${sign}",
  "language_code": "USAR_CODIGO_CORRESPONDIENTE",
  "week_start": "${weekStart}",
  "week_end": "${weekEnd}",
  "weekly_theme": "string",
  "cosmic_overview": "string",
  "general": "string",
  "love": "string",
  "health": "string",
  "money": "string",
  "career": "string",
  "spirituality": "string",
  "weekly_challenge": "string",
  "weekly_opportunity": "string",
  "best_days": ["string", "string"],
  "energy_level": "integer entre 6 y 10",
  "luck_rating": "integer entre 4 y 8",
  "lucky_numbers": [int, int, int, int],
  "lucky_colors": ["string", "string", "string"],
  "power_mantra": "string",
  "key_advice": "string",
  "content_type": "weekly_cosmic_coaching",
  "generated_at": "${moment().format('YYYY-MM-DD')}"
}

### Instrucciones espec√≠ficas:

- "weekly_theme": 3 a 5 palabras que capturen la esencia de la semana
- "cosmic_overview": an√°lisis astrol√≥gico breve (25-35 palabras)
- "general": predicci√≥n general detallada (120-150 palabras)
- "love": relaciones y romance (80-100 palabras)
- "health": bienestar f√≠sico y mental (60-80 palabras)  
- "money": finanzas y econom√≠a (80-100 palabras)
- "career": trabajo y desarrollo profesional (60-80 palabras)
- "spirituality": crecimiento personal (50-70 palabras)
- "weekly_challenge": principal reto (20-30 palabras)
- "weekly_opportunity": mejor oportunidad (20-30 palabras)
- "best_days": dos d√≠as m√°s favorables ["Lunes", "Mi√©rcoles"]
- "energy_level": entero entre 6 y 10
- "luck_rating": entero entre 4 y 8
- "lucky_numbers": cuatro enteros entre 1 y 99
- "lucky_colors": tres colores como strings
- "power_mantra": afirmaci√≥n (8-12 palabras)
- "key_advice": consejo principal (15-25 palabras)

Tu salida debe ser **solo** ese JSON.`;
  }

  /**
   * Store daily horoscope in database
   */
  async storeDailyHoroscope(horoscope) {
    const query = `
      INSERT INTO daily_horoscopes (sign, language_code, date, content)
      VALUES ($1, $2, $3, $4)
      ON CONFLICT (sign, language_code, date) 
      DO UPDATE SET content = $4, updated_at = NOW()
    `;
    
    await db.query(query, [
      horoscope.sign,
      horoscope.language_code,
      horoscope.date,
      JSON.stringify(horoscope.content)
    ]);
  }

  /**
   * Store weekly horoscope in database
   */
  async storeWeeklyHoroscope(horoscope) {
    const query = `
      INSERT INTO weekly_horoscopes (sign, language_code, week_start, week_end, content)
      VALUES ($1, $2, $3, $4, $5)
      ON CONFLICT (sign, language_code, week_start)
      DO UPDATE SET content = $5, updated_at = NOW(), week_end = $4
    `;
    
    await db.query(query, [
      horoscope.sign,
      horoscope.language_code,
      horoscope.week_start,
      horoscope.week_end,
      JSON.stringify(horoscope.content)
    ]);
  }

  /**
   * Clean old daily horoscopes (keep last 7 days)
   */
  async cleanOldDailyHoroscopes() {
    try {
      const result = await db.query(`
        DELETE FROM daily_horoscopes 
        WHERE date < CURRENT_DATE - INTERVAL '7 days'
      `);
      console.log(`üßπ Cleaned ${result.rowCount} old daily horoscopes`);
    } catch (error) {
      console.error('Error cleaning old daily horoscopes:', error);
    }
  }

  /**
   * Clean old weekly horoscopes (keep last 4 weeks)
   */
  async cleanOldWeeklyHoroscopes() {
    try {
      const result = await db.query(`
        DELETE FROM weekly_horoscopes 
        WHERE week_start < CURRENT_DATE - INTERVAL '28 days'
      `);
      console.log(`üßπ Cleaned ${result.rowCount} old weekly horoscopes`);
    } catch (error) {
      console.error('Error cleaning old weekly horoscopes:', error);
    }
  }

  /**
   * Utility: Add delay between requests
   */
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * Get generation status and statistics
   */
  async getGenerationStats() {
    try {
      const dailyCount = await db.query(`
        SELECT COUNT(*) as count FROM daily_horoscopes 
        WHERE date = CURRENT_DATE
      `);
      
      const weekStart = moment().startOf('isoWeek').format('YYYY-MM-DD');
      const weeklyCount = await db.query(`
        SELECT COUNT(*) as count FROM weekly_horoscopes 
        WHERE week_start = $1
      `, [weekStart]);

      return {
        daily: {
          current: parseInt(dailyCount.rows[0].count),
          expected: 72,
          coverage: Math.round((parseInt(dailyCount.rows[0].count) / 72) * 100)
        },
        weekly: {
          current: parseInt(weeklyCount.rows[0].count),
          expected: 72,
          coverage: Math.round((parseInt(weeklyCount.rows[0].count) / 72) * 100)
        }
      };
    } catch (error) {
      console.error('Error getting generation stats:', error);
      return null;
    }
  }

  /**
   * üé≠ MOCK DAILY HOROSCOPE (for development without OpenAI)
   */
  getMockDailyHoroscope(sign, language, date) {
    return {
      sign: sign,
      date: date,
      language_code: language.code,
      general: `Mock daily horoscope for ${sign} on ${date}. The stars are aligned for positive energy and new opportunities.`,
      content: `Your ${sign} daily prediction. Focus on personal growth and embrace the changes coming your way.`,
      daily: `Today's ${sign} horoscope brings cosmic insights for your journey ahead.`,
      weekly: `This week brings transformation for ${sign} signs.`,
      monthly: `This month holds special significance for ${sign} individuals.`,
      yearly: `The year ahead promises growth and success for ${sign}.`,
      love_rating: Math.floor(Math.random() * 5) + 1,
      work_rating: Math.floor(Math.random() * 5) + 1,
      health_rating: Math.floor(Math.random() * 5) + 1,
      money_rating: Math.floor(Math.random() * 5) + 1,
      overall_rating: Math.floor(Math.random() * 5) + 1,
      lucky_number: Math.floor(Math.random() * 99) + 1,
      lucky_color: ['Gold', 'Silver', 'Blue', 'Green', 'Red', 'Purple'][Math.floor(Math.random() * 6)],
      mood: ['Optimistic', 'Energetic', 'Calm', 'Focused', 'Creative'][Math.floor(Math.random() * 5)],
      advice: 'Trust your instincts today and take positive action toward your goals.',
      keywords: 'Success, Growth, Opportunity, Change, Wisdom'
    };
  }

  /**
   * üé≠ MOCK WEEKLY HOROSCOPE (for development without OpenAI)
   */
  getMockWeeklyHoroscope(sign, language, weekStart, weekEnd) {
    return {
      sign: sign,
      week_start: weekStart,
      week_end: weekEnd,
      language_code: language.code,
      content: `Mock weekly horoscope for ${sign} from ${weekStart} to ${weekEnd}. This week brings opportunities for growth.`,
      weekly: `Weekly predictions for ${sign}: Expect positive changes and new beginnings this week.`,
      predictions: `The cosmos suggests this is a powerful week for ${sign} individuals.`,
      love_rating: Math.floor(Math.random() * 5) + 1,
      work_rating: Math.floor(Math.random() * 5) + 1,
      health_rating: Math.floor(Math.random() * 5) + 1,
      money_rating: Math.floor(Math.random() * 5) + 1,
      overall_rating: Math.floor(Math.random() * 5) + 1,
      lucky_numbers: [Math.floor(Math.random() * 99) + 1, Math.floor(Math.random() * 99) + 1].join(', '),
      lucky_colors: ['Gold', 'Silver', 'Blue'][Math.floor(Math.random() * 3)],
      advice: 'Focus on your goals and trust the process this week.',
      keywords: 'Progress, Wisdom, Balance, Success, Harmony'
    };
  }
}

module.exports = new HoroscopeGeneratorService();