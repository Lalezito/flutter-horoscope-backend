# CONTINUOUS SECURITY MONITORING
# 
# Runs comprehensive security scans on schedule and security events
# Includes dependency checks, secret scanning, and vulnerability assessments

name: 🔒 Security Monitoring

on:
  schedule:
    # Run security scan every 6 hours
    - cron: '0 */6 * * *'
  push:
    branches: [main, production]
    paths:
      - 'package*.json'
      - 'src/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main, production]
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - secrets
          - containers

env:
  NODE_VERSION: '18.x'

jobs:
  # 🔍 DEPENDENCY VULNERABILITY SCANNING
  dependency-scan:
    name: 🔍 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 NPM Audit (High & Critical)
        run: |
          echo "🔍 Running NPM audit for high and critical vulnerabilities..."
          npm audit --audit-level=high --json > npm-audit.json || true
          
          # Check if there are any high or critical vulnerabilities
          if [ -s npm-audit.json ]; then
            echo "📊 Audit results found, analyzing..."
            node -e "
              const audit = JSON.parse(require('fs').readFileSync('npm-audit.json', 'utf8'));
              const vulnerabilities = audit.vulnerabilities || {};
              let highCount = 0, criticalCount = 0;
              
              Object.values(vulnerabilities).forEach(vuln => {
                if (vuln.severity === 'high') highCount++;
                if (vuln.severity === 'critical') criticalCount++;
              });
              
              console.log(\`High vulnerabilities: \${highCount}\`);
              console.log(\`Critical vulnerabilities: \${criticalCount}\`);
              
              if (criticalCount > 0) {
                console.log('❌ Critical vulnerabilities found!');
                process.exit(1);
              }
              if (highCount > 5) {
                console.log('⚠️ Too many high vulnerabilities found!');
                process.exit(1);
              }
            "

      - name: 🛠️ Auto-fix vulnerabilities
        run: |
          echo "🛠️ Attempting to auto-fix vulnerabilities..."
          npm audit fix --dry-run
          npm audit fix || true

      - name: 📊 Snyk vulnerability scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json > snyk-results.json
        continue-on-error: true

      - name: 📤 Upload Snyk results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

      - name: 📊 Generate dependency report
        run: |
          echo "📊 Generating comprehensive dependency report..."
          npm list --depth=0 --json > dependencies.json
          
          node -e "
            const deps = JSON.parse(require('fs').readFileSync('dependencies.json', 'utf8'));
            const audit = JSON.parse(require('fs').readFileSync('npm-audit.json', 'utf8'));
            
            console.log('# Dependency Security Report');
            console.log('## Summary');
            console.log(\`- Total dependencies: \${Object.keys(deps.dependencies || {}).length}\`);
            console.log(\`- Vulnerabilities found: \${audit.metadata?.vulnerabilities?.total || 0}\`);
            console.log(\`- Last updated: \${new Date().toISOString()}\`);
            console.log('');
            
            if (audit.advisories) {
              console.log('## Critical Issues');
              Object.values(audit.advisories).forEach(advisory => {
                if (advisory.severity === 'critical' || advisory.severity === 'high') {
                  console.log(\`- **\${advisory.title}** (\${advisory.severity})\`);
                  console.log(\`  - Package: \${advisory.module_name}\`);
                  console.log(\`  - Recommendation: \${advisory.recommendation}\`);
                  console.log('');
                }
              });
            }
          " > dependency-report.md

      - name: 📤 Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-security-report
          path: |
            dependency-report.md
            npm-audit.json
            snyk-results.json

  # 🔐 SECRET SCANNING
  secret-scan:
    name: 🔐 Secret Scanning
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified --json --output trufflehog-results.json

      - name: 🔒 GitLeaks secret scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        with:
          config-path: .gitleaks.toml

      - name: 🔍 Custom secret patterns
        run: |
          echo "🔍 Scanning for custom secret patterns..."
          
          # Define custom patterns for our application
          patterns=(
            "OPENAI_API_KEY.*=.*sk-[a-zA-Z0-9]+"
            "DATABASE_URL.*=.*postgresql://"
            "ADMIN_KEY.*=.*[a-zA-Z0-9]{32,}"
            "WEBHOOK_.*_URL.*=.*https?://"
            "RAILWAY_TOKEN.*=.*[a-zA-Z0-9-]+"
          )
          
          found_secrets=false
          for pattern in "${patterns[@]}"; do
            if grep -r -E "$pattern" --exclude-dir=.git --exclude="*.md" .; then
              echo "⚠️ Potential secret found with pattern: $pattern"
              found_secrets=true
            fi
          done
          
          if [ "$found_secrets" = true ]; then
            echo "❌ Potential secrets detected in codebase!"
            exit 1
          fi

      - name: 📊 Secret scan summary
        if: always()
        run: |
          echo "## Secret Scan Summary" > secret-scan-report.md
          echo "- Scan date: $(date)" >> secret-scan-report.md
          echo "- Repository: ${{ github.repository }}" >> secret-scan-report.md
          echo "- Commit: ${{ github.sha }}" >> secret-scan-report.md
          
          if [ -f trufflehog-results.json ]; then
            echo "- TruffleHog results: $(jq length trufflehog-results.json) findings" >> secret-scan-report.md
          fi
          
          echo "" >> secret-scan-report.md
          echo "### Scan Tools Used" >> secret-scan-report.md
          echo "- TruffleHog: Advanced secret detection" >> secret-scan-report.md
          echo "- GitLeaks: Git repository secret scanning" >> secret-scan-report.md
          echo "- Custom patterns: Application-specific secrets" >> secret-scan-report.md

      - name: 📤 Upload secret scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results
          path: |
            secret-scan-report.md
            trufflehog-results.json

  # 🐳 CONTAINER SECURITY SCANNING
  container-security:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'containers' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build container for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: zodiac-backend:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔍 Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs.sarif'

      - name: 🔍 Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'zodiac-backend:security-scan'
          format: 'sarif'
          output: 'trivy-container.sarif'

      - name: 🐳 Docker Scout scan
        uses: docker/scout-action@v1
        with:
          command: cves
          image: zodiac-backend:security-scan
          sarif-file: scout-results.sarif
          write-comment: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Grype vulnerability scan
        uses: anchore/scan-action@v3
        with:
          image: zodiac-backend:security-scan
          output-format: sarif
          output-file: grype-results.sarif

      - name: 📤 Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: |
            trivy-fs.sarif
            trivy-container.sarif
            scout-results.sarif
            grype-results.sarif

      - name: 📊 Container security report
        run: |
          echo "## Container Security Scan Report" > container-security-report.md
          echo "- Image: zodiac-backend:security-scan" >> container-security-report.md
          echo "- Scan date: $(date)" >> container-security-report.md
          echo "- Base image: node:18-alpine" >> container-security-report.md
          echo "" >> container-security-report.md
          
          # Analyze Trivy results
          if [ -f trivy-container.sarif ]; then
            echo "### Trivy Scan Results" >> container-security-report.md
            jq -r '.runs[0].results | length' trivy-container.sarif > /tmp/trivy_count 2>/dev/null || echo "0" > /tmp/trivy_count
            echo "- Vulnerabilities found: $(cat /tmp/trivy_count)" >> container-security-report.md
          fi
          
          echo "" >> container-security-report.md
          echo "### Security Recommendations" >> container-security-report.md
          echo "- Use minimal base images" >> container-security-report.md
          echo "- Keep dependencies updated" >> container-security-report.md
          echo "- Run containers as non-root user" >> container-security-report.md
          echo "- Implement proper secret management" >> container-security-report.md

      - name: 📤 Upload container security report
        uses: actions/upload-artifact@v4
        with:
          name: container-security-report
          path: container-security-report.md

  # 🌐 NETWORK SECURITY SCAN
  network-security:
    name: 🌐 Network Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 SSL/TLS configuration scan
        run: |
          echo "🔍 Analyzing SSL/TLS configurations..."
          
          # Check for SSL/TLS best practices in code
          echo "## Network Security Analysis" > network-security-report.md
          echo "- Analysis date: $(date)" >> network-security-report.md
          echo "" >> network-security-report.md
          
          echo "### SSL/TLS Configuration" >> network-security-report.md
          if grep -r "rejectUnauthorized.*false" src/; then
            echo "⚠️ Found disabled SSL certificate verification" >> network-security-report.md
          else
            echo "✅ No disabled SSL certificate verification found" >> network-security-report.md
          fi
          
          echo "" >> network-security-report.md
          echo "### HTTP Security Headers" >> network-security-report.md
          if grep -r "helmet" src/; then
            echo "✅ Helmet.js security headers found" >> network-security-report.md
          else
            echo "⚠️ No security headers middleware found" >> network-security-report.md
          fi

      - name: 🔍 CORS configuration analysis
        run: |
          echo "" >> network-security-report.md
          echo "### CORS Configuration" >> network-security-report.md
          
          if grep -r "origin.*\*" src/; then
            echo "⚠️ Wildcard CORS origin detected - review for production" >> network-security-report.md
          else
            echo "✅ CORS configuration appears secure" >> network-security-report.md
          fi

      - name: 📤 Upload network security report
        uses: actions/upload-artifact@v4
        with:
          name: network-security-report
          path: network-security-report.md

  # 🚨 SECURITY ALERTS AND NOTIFICATIONS
  security-notification:
    name: 🚨 Security Notifications
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, container-security, network-security]
    if: always() && (failure() || contains(needs.*.result, 'failure'))

    steps:
      - name: 📊 Aggregate security results
        run: |
          echo "## Security Scan Summary" > security-summary.md
          echo "- Scan triggered by: ${{ github.event_name }}" >> security-summary.md
          echo "- Repository: ${{ github.repository }}" >> security-summary.md
          echo "- Commit: ${{ github.sha }}" >> security-summary.md
          echo "- Date: $(date)" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "### Scan Results" >> security-summary.md
          echo "- Dependency scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
          echo "- Secret scan: ${{ needs.secret-scan.result }}" >> security-summary.md
          echo "- Container security: ${{ needs.container-security.result }}" >> security-summary.md
          echo "- Network security: ${{ needs.network-security.result }}" >> security-summary.md
          
          # Determine overall status
          if [[ "${{ needs.dependency-scan.result }}" == "failure" || "${{ needs.secret-scan.result }}" == "failure" ]]; then
            echo "" >> security-summary.md
            echo "⚠️ **CRITICAL SECURITY ISSUES DETECTED**" >> security-summary.md
            echo "Immediate attention required!" >> security-summary.md
          fi

      - name: 🚨 Critical security alert
        if: contains(needs.*.result, 'failure')
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          text: |
            🚨 CRITICAL SECURITY ALERT 🚨
            
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            
            Failed scans:
            - Dependency scan: ${{ needs.dependency-scan.result }}
            - Secret scan: ${{ needs.secret-scan.result }}
            - Container security: ${{ needs.container-security.result }}
            - Network security: ${{ needs.network-security.result }}
            
            Please review immediately: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}

      - name: 📧 Email security notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "🚨 SECURITY ALERT: ${{ github.repository }}"
          to: ${{ secrets.SECURITY_EMAIL }}
          from: "Security Scanner <security@github.com>"
          body: |
            SECURITY SCAN ALERT
            
            Repository: ${{ github.repository }}
            Scan Results:
            - Dependency scan: ${{ needs.dependency-scan.result }}
            - Secret scan: ${{ needs.secret-scan.result }}
            - Container security: ${{ needs.container-security.result }}
            - Network security: ${{ needs.network-security.result }}
            
            Please review the workflow results immediately:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: 📤 Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md