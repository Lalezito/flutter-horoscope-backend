-- ASTROLOGICAL TIMING SYSTEM TABLES
-- Migration 009: Create comprehensive timing and calendar sync system

-- =============================================================================
-- TIMING RECOMMENDATIONS TABLES
-- =============================================================================

-- Main timing recommendations table
CREATE TABLE IF NOT EXISTS timing_recommendations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL,
    activity_type VARCHAR(100) NOT NULL,
    recommended_date DATE NOT NULL,
    recommended_time TIME,
    recommended_end_time TIME,
    timezone VARCHAR(50) DEFAULT 'UTC',
    
    -- Astrological calculation data
    astrological_factors JSONB NOT NULL DEFAULT '{}',
    planetary_influences JSONB DEFAULT '{}',
    lunar_phase_data JSONB DEFAULT '{}',
    aspect_data JSONB DEFAULT '{}',
    
    -- Confidence and quality metrics
    confidence_score DECIMAL(5,3) NOT NULL CHECK (confidence_score >= 0.0 AND confidence_score <= 1.0),
    timing_quality VARCHAR(20) DEFAULT 'good' CHECK (timing_quality IN ('excellent', 'good', 'fair', 'poor')),
    specificity_score DECIMAL(5,3) DEFAULT 0.5,
    
    -- Context and reasoning
    reasoning_text TEXT,
    avoid_factors JSONB DEFAULT '{}',
    enhancement_factors JSONB DEFAULT '{}',
    
    -- Usage tracking
    used_by_user BOOLEAN DEFAULT false,
    used_at TIMESTAMP WITH TIME ZONE,
    user_feedback TEXT,
    user_rating INTEGER CHECK (user_rating >= 1 AND user_rating <= 5),
    
    -- Metadata
    calculation_metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP WITH TIME ZONE,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- Indexes for performance
    CONSTRAINT fk_timing_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Activity categories for timing optimization
CREATE TABLE IF NOT EXISTS timing_categories (
    id SERIAL PRIMARY KEY,
    category_name VARCHAR(100) UNIQUE NOT NULL,
    display_name VARCHAR(150) NOT NULL,
    description TEXT,
    
    -- Astrological configuration
    primary_planets JSONB NOT NULL DEFAULT '[]', -- ['sun', 'mercury', 'jupiter']
    relevant_houses JSONB NOT NULL DEFAULT '[]', -- [10, 3, 9]
    preferred_aspects JSONB NOT NULL DEFAULT '[]', -- ['trine', 'sextile']
    avoid_aspects JSONB NOT NULL DEFAULT '[]', -- ['square', 'opposition']
    lunar_preferences JSONB DEFAULT '[]', -- ['waxing_crescent', 'waxing_gibbous']
    
    -- Timing constraints
    avoid_void_moon BOOLEAN DEFAULT true,
    mercury_retrograde_factor DECIMAL(3,2) DEFAULT 0.5,
    avoid_eclipse_periods BOOLEAN DEFAULT true,
    optimal_time_ranges JSONB DEFAULT '[]', -- [{'start': '09:00', 'end': '11:00'}]
    
    -- Premium features
    premium_only BOOLEAN DEFAULT false,
    complexity_level VARCHAR(20) DEFAULT 'standard' CHECK (complexity_level IN ('basic', 'standard', 'advanced', 'expert')),
    
    -- Usage tracking
    usage_count INTEGER DEFAULT 0,
    success_rate DECIMAL(5,3) DEFAULT 0.5,
    average_user_rating DECIMAL(3,2) DEFAULT 3.0,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Optimal timing periods (pre-calculated for performance)
CREATE TABLE IF NOT EXISTS optimal_periods (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    date_start DATE NOT NULL,
    date_end DATE NOT NULL,
    time_start TIME,
    time_end TIME,
    
    -- Astrological context
    dominant_planetary_influence VARCHAR(50),
    lunar_phase VARCHAR(30),
    major_aspects JSONB DEFAULT '[]',
    quality_rating VARCHAR(20) DEFAULT 'good',
    
    -- Activity optimization
    best_for_activities JSONB DEFAULT '[]', -- List of activity types
    avoid_for_activities JSONB DEFAULT '[]',
    general_energy_type VARCHAR(50), -- 'action', 'communication', 'planning', etc.
    
    -- Calculation metadata
    calculation_method VARCHAR(50) DEFAULT 'swiss_ephemeris',
    confidence_level DECIMAL(3,2) DEFAULT 0.7,
    calculated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- Performance indexes
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- User timing preferences
CREATE TABLE IF NOT EXISTS user_timing_preferences (
    user_id UUID PRIMARY KEY,
    
    -- Timing preferences
    preferred_timeframe_hours INTEGER DEFAULT 48,
    preferred_categories JSONB DEFAULT '[]', -- ['love', 'career', 'finance']
    min_confidence_threshold DECIMAL(3,2) DEFAULT 0.4,
    max_recommendations_per_query INTEGER DEFAULT 10,
    
    -- Calendar integration preferences
    primary_calendar_provider VARCHAR(50),
    auto_sync_enabled BOOLEAN DEFAULT false,
    sync_interval_minutes INTEGER DEFAULT 60,
    create_calendar_events BOOLEAN DEFAULT false,
    
    -- Notification preferences
    enable_timing_alerts BOOLEAN DEFAULT true,
    alert_lead_time_hours INTEGER DEFAULT 24,
    mercury_retrograde_warnings BOOLEAN DEFAULT true,
    void_moon_warnings BOOLEAN DEFAULT true,
    eclipse_warnings BOOLEAN DEFAULT true,
    
    -- Advanced features
    premium_subscriber BOOLEAN DEFAULT false,
    advanced_calculations BOOLEAN DEFAULT false,
    personalized_house_system VARCHAR(20) DEFAULT 'placidus',
    include_minor_aspects BOOLEAN DEFAULT false,
    
    -- Timezone and location
    default_timezone VARCHAR(50) DEFAULT 'UTC',
    location_for_calculations VARCHAR(200),
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_timing_prefs_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- =============================================================================
-- CALENDAR SYNCHRONIZATION TABLES
-- =============================================================================

-- Calendar provider connections
CREATE TABLE IF NOT EXISTS calendar_connections (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL,
    provider VARCHAR(50) NOT NULL, -- 'google', 'apple', 'microsoft', 'outlook'
    connection_id VARCHAR(255) NOT NULL,
    
    -- Authentication data (encrypted)
    credentials JSONB NOT NULL DEFAULT '{}',
    access_token_encrypted TEXT,
    refresh_token_encrypted TEXT,
    token_expires_at TIMESTAMP WITH TIME ZONE,
    
    -- Calendar configuration
    calendar_list JSONB DEFAULT '[]',
    primary_calendar_id VARCHAR(255),
    calendar_name VARCHAR(200),
    calendar_timezone VARCHAR(50) DEFAULT 'UTC',
    
    -- Sync configuration
    is_primary BOOLEAN DEFAULT false,
    active BOOLEAN DEFAULT true,
    sync_enabled BOOLEAN DEFAULT true,
    last_sync_at TIMESTAMP WITH TIME ZONE,
    sync_status VARCHAR(50) DEFAULT 'pending', -- 'active', 'error', 'expired', 'disabled'
    sync_error_message TEXT,
    
    -- Usage metrics
    total_events_synced INTEGER DEFAULT 0,
    events_created INTEGER DEFAULT 0,
    events_updated INTEGER DEFAULT 0,
    last_sync_duration_ms INTEGER,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_calendar_conn_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT unique_user_provider UNIQUE (user_id, provider)
);

-- Calendar events created by timing system
CREATE TABLE IF NOT EXISTS calendar_events (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL,
    provider VARCHAR(50) NOT NULL,
    external_event_id VARCHAR(500) NOT NULL, -- Provider's event ID
    calendar_id VARCHAR(255),
    
    -- Event data
    event_data JSONB NOT NULL DEFAULT '{}',
    event_title VARCHAR(500),
    event_description TEXT,
    start_time TIMESTAMP WITH TIME ZONE NOT NULL,
    end_time TIMESTAMP WITH TIME ZONE NOT NULL,
    timezone VARCHAR(50) DEFAULT 'UTC',
    location VARCHAR(500),
    
    -- Astrological timing connection
    timing_recommendation_id UUID,
    activity_type VARCHAR(100),
    confidence_score DECIMAL(5,3),
    
    -- Event metadata
    event_status VARCHAR(50) DEFAULT 'confirmed', -- 'tentative', 'confirmed', 'cancelled'
    attendees_count INTEGER DEFAULT 0,
    is_all_day BOOLEAN DEFAULT false,
    recurrence_rule TEXT,
    
    -- Conflict detection
    conflict_detected BOOLEAN DEFAULT false,
    conflict_resolution_notes TEXT,
    alternative_times_suggested JSONB DEFAULT '[]',
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    synced_at TIMESTAMP WITH TIME ZONE,
    
    CONSTRAINT fk_calendar_event_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_calendar_event_timing FOREIGN KEY (timing_recommendation_id) REFERENCES timing_recommendations(id) ON DELETE SET NULL
);

-- External calendar events (imported for conflict detection)
CREATE TABLE IF NOT EXISTS external_calendar_events (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL,
    provider VARCHAR(50) NOT NULL,
    calendar_id VARCHAR(255),
    event_id VARCHAR(500) NOT NULL, -- External event ID
    
    -- Event data from external calendar
    event_data JSONB NOT NULL DEFAULT '{}',
    title VARCHAR(500),
    start_time TIMESTAMP WITH TIME ZONE NOT NULL,
    end_time TIMESTAMP WITH TIME ZONE NOT NULL,
    timezone VARCHAR(50) DEFAULT 'UTC',
    status VARCHAR(50),
    
    -- Import tracking
    imported_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    last_modified TIMESTAMP WITH TIME ZONE,
    
    -- Conflict analysis
    analyzed_for_conflicts BOOLEAN DEFAULT false,
    conflict_analysis_data JSONB DEFAULT '{}',
    timing_quality_assessment VARCHAR(50),
    astrological_recommendations JSONB DEFAULT '{}',
    
    CONSTRAINT fk_external_event_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT unique_external_event UNIQUE (user_id, provider, event_id)
);

-- Calendar sync activity log
CREATE TABLE IF NOT EXISTS calendar_sync_log (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL,
    provider VARCHAR(50) NOT NULL,
    sync_type VARCHAR(50) DEFAULT 'scheduled', -- 'manual', 'scheduled', 'initial', 'conflict_check'
    
    -- Sync results
    sync_result JSONB DEFAULT '{}',
    events_processed INTEGER DEFAULT 0,
    events_created INTEGER DEFAULT 0,
    events_updated INTEGER DEFAULT 0,
    events_deleted INTEGER DEFAULT 0,
    errors_count INTEGER DEFAULT 0,
    
    -- Performance metrics
    sync_duration_ms INTEGER,
    api_calls_made INTEGER DEFAULT 0,
    success BOOLEAN DEFAULT true,
    error_details JSONB DEFAULT '{}',
    
    synced_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_sync_log_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- =============================================================================
-- TIMING ANALYTICS AND MONITORING TABLES
-- =============================================================================

-- Timing recommendation analytics
CREATE TABLE IF NOT EXISTS timing_analytics (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID,
    category VARCHAR(100),
    date DATE DEFAULT CURRENT_DATE,
    
    -- Generation metrics
    total_recommendations INTEGER DEFAULT 0,
    average_confidence DECIMAL(5,3) DEFAULT 0.0,
    confidence_distribution JSONB DEFAULT '{}', -- {'0.3-0.5': 10, '0.5-0.7': 15}
    
    -- Usage metrics
    recommendations_used INTEGER DEFAULT 0,
    usage_rate DECIMAL(5,3) DEFAULT 0.0,
    average_user_rating DECIMAL(3,2),
    
    -- Astrological factors
    most_common_planetary_influences JSONB DEFAULT '{}',
    lunar_phase_distribution JSONB DEFAULT '{}',
    mercury_retrograde_impact DECIMAL(3,2),
    void_moon_adjustments INTEGER DEFAULT 0,
    
    -- Performance metrics
    average_calculation_time_ms INTEGER,
    cache_hit_rate DECIMAL(3,2),
    api_response_time_ms INTEGER,
    
    last_updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_timing_analytics_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT unique_user_category_date UNIQUE (user_id, category, date)
);

-- Timing verification tracking (for accuracy measurement)
CREATE TABLE IF NOT EXISTS timing_verification (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    timing_recommendation_id UUID NOT NULL,
    user_id UUID NOT NULL,
    
    -- Verification data
    user_followed_recommendation BOOLEAN,
    actual_outcome VARCHAR(50), -- 'positive', 'negative', 'neutral', 'mixed'
    outcome_details TEXT,
    user_satisfaction_rating INTEGER CHECK (user_satisfaction_rating >= 1 AND user_satisfaction_rating <= 5),
    
    -- Objective measures (if available)
    objective_success_metrics JSONB DEFAULT '{}',
    external_confirmation BOOLEAN DEFAULT false,
    
    -- Learning data for ML improvements
    improvement_suggestions TEXT,
    factors_that_helped JSONB DEFAULT '[]',
    factors_that_hindered JSONB DEFAULT '[]',
    
    verified_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    follow_up_date DATE,
    
    CONSTRAINT fk_verification_timing FOREIGN KEY (timing_recommendation_id) REFERENCES timing_recommendations(id) ON DELETE CASCADE,
    CONSTRAINT fk_verification_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Background processing queue for timing calculations
CREATE TABLE IF NOT EXISTS timing_calculation_queue (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID,
    request_type VARCHAR(50) NOT NULL, -- 'individual_timing', 'batch_calculation', 'calendar_sync'
    
    -- Request data
    request_data JSONB NOT NULL DEFAULT '{}',
    priority INTEGER DEFAULT 5 CHECK (priority >= 1 AND priority <= 10),
    
    -- Processing status
    status VARCHAR(50) DEFAULT 'pending', -- 'pending', 'processing', 'completed', 'failed', 'cancelled'
    processing_started_at TIMESTAMP WITH TIME ZONE,
    processing_completed_at TIMESTAMP WITH TIME ZONE,
    processing_duration_ms INTEGER,
    
    -- Results
    result_data JSONB DEFAULT '{}',
    error_message TEXT,
    retry_count INTEGER DEFAULT 0,
    max_retries INTEGER DEFAULT 3,
    
    -- Scheduling
    scheduled_for TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_queue_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- =============================================================================
-- INDEXES FOR PERFORMANCE OPTIMIZATION
-- =============================================================================

-- Timing recommendations indexes
CREATE INDEX IF NOT EXISTS idx_timing_recommendations_user_id ON timing_recommendations(user_id);
CREATE INDEX IF NOT EXISTS idx_timing_recommendations_activity_type ON timing_recommendations(activity_type);
CREATE INDEX IF NOT EXISTS idx_timing_recommendations_date ON timing_recommendations(recommended_date);
CREATE INDEX IF NOT EXISTS idx_timing_recommendations_confidence ON timing_recommendations(confidence_score DESC);
CREATE INDEX IF NOT EXISTS idx_timing_recommendations_expires ON timing_recommendations(expires_at);
CREATE INDEX IF NOT EXISTS idx_timing_recommendations_user_activity ON timing_recommendations(user_id, activity_type);
CREATE INDEX IF NOT EXISTS idx_timing_recommendations_active ON timing_recommendations(user_id, expires_at) WHERE expires_at > CURRENT_TIMESTAMP;

-- Calendar connections indexes
CREATE INDEX IF NOT EXISTS idx_calendar_connections_user_id ON calendar_connections(user_id);
CREATE INDEX IF NOT EXISTS idx_calendar_connections_provider ON calendar_connections(provider);
CREATE INDEX IF NOT EXISTS idx_calendar_connections_sync_status ON calendar_connections(sync_status);
CREATE INDEX IF NOT EXISTS idx_calendar_connections_active ON calendar_connections(user_id, active, sync_enabled);

-- Calendar events indexes
CREATE INDEX IF NOT EXISTS idx_calendar_events_user_id ON calendar_events(user_id);
CREATE INDEX IF NOT EXISTS idx_calendar_events_provider ON calendar_events(provider);
CREATE INDEX IF NOT EXISTS idx_calendar_events_start_time ON calendar_events(start_time);
CREATE INDEX IF NOT EXISTS idx_calendar_events_timing_rec ON calendar_events(timing_recommendation_id);
CREATE INDEX IF NOT EXISTS idx_calendar_events_time_range ON calendar_events(user_id, start_time, end_time);

-- External events indexes
CREATE INDEX IF NOT EXISTS idx_external_events_user_provider ON external_calendar_events(user_id, provider);
CREATE INDEX IF NOT EXISTS idx_external_events_time_range ON external_calendar_events(user_id, start_time, end_time);
CREATE INDEX IF NOT EXISTS idx_external_events_conflicts ON external_calendar_events(user_id, analyzed_for_conflicts);

-- Optimal periods indexes
CREATE INDEX IF NOT EXISTS idx_optimal_periods_date_range ON optimal_periods(date_start, date_end);
CREATE INDEX IF NOT EXISTS idx_optimal_periods_activities ON optimal_periods USING GIN (best_for_activities);
CREATE INDEX IF NOT EXISTS idx_optimal_periods_quality ON optimal_periods(quality_rating, confidence_level);

-- Analytics indexes
CREATE INDEX IF NOT EXISTS idx_timing_analytics_user_date ON timing_analytics(user_id, date);
CREATE INDEX IF NOT EXISTS idx_timing_analytics_category ON timing_analytics(category, date);

-- Processing queue indexes
CREATE INDEX IF NOT EXISTS idx_queue_status ON timing_calculation_queue(status, scheduled_for);
CREATE INDEX IF NOT EXISTS idx_queue_user_status ON timing_calculation_queue(user_id, status);
CREATE INDEX IF NOT EXISTS idx_queue_priority ON timing_calculation_queue(priority DESC, scheduled_for);

-- =============================================================================
-- INITIAL DATA SEEDING
-- =============================================================================

-- Insert default timing categories
INSERT INTO timing_categories (category_name, display_name, description, primary_planets, relevant_houses, preferred_aspects, avoid_aspects, lunar_preferences) VALUES
('business_meeting', 'Business Meeting', 'Professional meetings and negotiations', '["sun", "mercury", "jupiter"]', '[10, 3, 9]', '["trine", "sextile", "conjunction"]', '["square", "opposition"]', '["waxing_crescent", "first_quarter", "waxing_gibbous"]'),
('job_interview', 'Job Interview', 'Job interviews and career opportunities', '["sun", "mercury", "jupiter"]', '[10, 1, 6]', '["trine", "sextile"]', '["square", "opposition"]', '["waxing_crescent", "waxing_gibbous"]'),
('first_date', 'First Date', 'Romantic encounters and relationship beginnings', '["venus", "moon", "sun"]', '[5, 7, 11]', '["trine", "sextile", "conjunction"]', '["square"]', '["new_moon", "waxing_crescent", "waxing_gibbous"]'),
('contract_signing', 'Contract Signing', 'Legal agreements and important documents', '["mercury", "jupiter", "sun"]', '[3, 9, 10]', '["trine", "sextile"]', '["square", "opposition"]', '["waxing_gibbous", "full_moon"]'),
('surgery_scheduling', 'Surgery Scheduling', 'Medical procedures and health interventions', '["sun", "mars", "moon"]', '[1, 6, 8]', '["trine", "sextile"]', '["square", "opposition"]', '["waxing_crescent", "first_quarter"]'),
('travel_booking', 'Travel Booking', 'Trip planning and travel arrangements', '["mercury", "jupiter", "sun"]', '[3, 9, 12]', '["trine", "sextile"]', '["square"]', '["waxing_crescent", "waxing_gibbous"]'),
('investment_decision', 'Investment Decision', 'Financial investments and major purchases', '["venus", "jupiter", "sun"]', '[2, 8, 11]', '["trine", "sextile"]', '["square", "opposition"]', '["waxing_gibbous", "full_moon"]'),
('important_conversation', 'Important Conversation', 'Serious discussions and communications', '["mercury", "moon", "venus"]', '[3, 7, 11]', '["trine", "sextile"]', '["square", "opposition"]', '["waxing_crescent", "waxing_gibbous"]'),
('creative_project_launch', 'Creative Project Launch', 'Artistic endeavors and creative launches', '["sun", "venus", "jupiter"]', '[5, 9, 11]', '["trine", "sextile", "conjunction"]', '["square"]', '["new_moon", "waxing_crescent"]'),
('property_purchase', 'Property Purchase', 'Real estate transactions and home buying', '["venus", "jupiter", "saturn"]', '[2, 4, 8]', '["trine", "sextile"]', '["square", "opposition"]', '["waxing_gibbous", "full_moon"]')
ON CONFLICT (category_name) DO NOTHING;

-- Update timing categories with additional configuration
UPDATE timing_categories SET
    avoid_void_moon = true,
    mercury_retrograde_factor = CASE category_name
        WHEN 'business_meeting' THEN 0.4
        WHEN 'job_interview' THEN 0.3
        WHEN 'contract_signing' THEN 0.2
        WHEN 'travel_booking' THEN 0.4
        WHEN 'investment_decision' THEN 0.3
        WHEN 'important_conversation' THEN 0.3
        ELSE 0.5
    END,
    optimal_time_ranges = CASE category_name
        WHEN 'business_meeting' THEN '[{"start": "09:00", "end": "11:00"}, {"start": "14:00", "end": "16:00"}]'
        WHEN 'job_interview' THEN '[{"start": "10:00", "end": "11:30"}, {"start": "14:30", "end": "16:00"}]'
        WHEN 'first_date' THEN '[{"start": "18:00", "end": "20:00"}, {"start": "19:00", "end": "21:00"}]'
        ELSE '[{"start": "09:00", "end": "11:00"}, {"start": "14:00", "end": "16:00"}]'
    END,
    premium_only = CASE category_name
        WHEN 'surgery_scheduling' THEN true
        WHEN 'investment_decision' THEN true
        WHEN 'property_purchase' THEN true
        ELSE false
    END,
    complexity_level = CASE category_name
        WHEN 'surgery_scheduling' THEN 'expert'
        WHEN 'investment_decision' THEN 'advanced'
        WHEN 'property_purchase' THEN 'advanced'
        WHEN 'business_meeting' THEN 'standard'
        ELSE 'basic'
    END
WHERE category_name IN (
    'business_meeting', 'job_interview', 'first_date', 'contract_signing',
    'surgery_scheduling', 'travel_booking', 'investment_decision',
    'important_conversation', 'creative_project_launch', 'property_purchase'
);

-- =============================================================================
-- TRIGGERS FOR AUTOMATIC UPDATES
-- =============================================================================

-- Update timing_recommendations.updated_at on changes
CREATE OR REPLACE FUNCTION update_timing_recommendations_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_timing_recommendations_updated_at
    BEFORE UPDATE ON timing_recommendations
    FOR EACH ROW
    EXECUTE FUNCTION update_timing_recommendations_updated_at();

-- Update calendar_connections.updated_at on changes
CREATE OR REPLACE FUNCTION update_calendar_connections_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_calendar_connections_updated_at
    BEFORE UPDATE ON calendar_connections
    FOR EACH ROW
    EXECUTE FUNCTION update_calendar_connections_updated_at();

-- Update usage statistics when timing recommendation is used
CREATE OR REPLACE FUNCTION update_timing_category_stats()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.used_by_user = true AND OLD.used_by_user = false THEN
        UPDATE timing_categories 
        SET usage_count = usage_count + 1,
            updated_at = CURRENT_TIMESTAMP
        WHERE category_name = NEW.activity_type;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_timing_category_stats
    AFTER UPDATE ON timing_recommendations
    FOR EACH ROW
    EXECUTE FUNCTION update_timing_category_stats();

-- =============================================================================
-- VIEWS FOR COMMON QUERIES
-- =============================================================================

-- View for active timing recommendations
CREATE OR REPLACE VIEW active_timing_recommendations AS
SELECT 
    tr.*,
    tc.display_name as category_display_name,
    tc.description as category_description,
    tc.premium_only,
    EXTRACT(HOURS FROM (tr.expires_at - CURRENT_TIMESTAMP)) as hours_until_expiry
FROM timing_recommendations tr
LEFT JOIN timing_categories tc ON tr.activity_type = tc.category_name
WHERE tr.expires_at > CURRENT_TIMESTAMP
    AND tr.used_by_user = false;

-- View for calendar sync status
CREATE OR REPLACE VIEW calendar_sync_status AS
SELECT 
    cc.user_id,
    cc.provider,
    cc.active,
    cc.sync_enabled,
    cc.sync_status,
    cc.last_sync_at,
    cc.total_events_synced,
    cc.calendar_name,
    CASE 
        WHEN cc.last_sync_at IS NULL THEN 'Never synced'
        WHEN cc.last_sync_at < CURRENT_TIMESTAMP - INTERVAL '1 hour' THEN 'Sync needed'
        ELSE 'Up to date'
    END as sync_recommendation
FROM calendar_connections cc
WHERE cc.active = true;

-- View for timing analytics summary
CREATE OR REPLACE VIEW timing_analytics_summary AS
SELECT 
    ta.user_id,
    ta.category,
    ta.date,
    ta.total_recommendations,
    ta.average_confidence,
    ta.recommendations_used,
    ta.usage_rate,
    ta.average_user_rating,
    tc.display_name as category_name,
    tc.complexity_level
FROM timing_analytics ta
LEFT JOIN timing_categories tc ON ta.category = tc.category_name
WHERE ta.date >= CURRENT_DATE - INTERVAL '30 days';

COMMENT ON TABLE timing_recommendations IS 'Main table for storing astrological timing recommendations';
COMMENT ON TABLE timing_categories IS 'Configuration for different types of activities and their timing requirements';
COMMENT ON TABLE calendar_connections IS 'User connections to external calendar providers';
COMMENT ON TABLE calendar_events IS 'Events created by the timing system in external calendars';
COMMENT ON TABLE external_calendar_events IS 'Events imported from external calendars for conflict detection';
COMMENT ON TABLE timing_analytics IS 'Analytics and metrics for timing recommendation usage';
COMMENT ON TABLE timing_verification IS 'User feedback and verification of timing recommendation accuracy';

-- Migration completion
INSERT INTO schema_migrations (migration_id, description, applied_at) 
VALUES ('009', 'Create timing system and calendar sync tables', CURRENT_TIMESTAMP)
ON CONFLICT (migration_id) DO NOTHING;