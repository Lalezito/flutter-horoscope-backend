-- Migration: AI Coach Conversation Management Tables
-- Created: 2025-09-12
-- Description: Creates tables for AI coach conversation history and context management

-- Create conversation history table for AI coach
CREATE TABLE IF NOT EXISTS coach_conversations (
    id SERIAL PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL,
    user_message TEXT NOT NULL,
    ai_response TEXT NOT NULL,
    scenario VARCHAR(50) DEFAULT 'daily_guidance',
    tokens_used INTEGER DEFAULT 0,
    quality_score DECIMAL(3,2) DEFAULT 0.80,
    model_used VARCHAR(100) DEFAULT 'gpt-4',
    response_time_ms INTEGER,
    cached BOOLEAN DEFAULT FALSE,
    zodiac_sign VARCHAR(20),
    language_code VARCHAR(5) DEFAULT 'en',
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Create user coaching preferences table
CREATE TABLE IF NOT EXISTS coach_user_preferences (
    id SERIAL PRIMARY KEY,
    user_id VARCHAR(255) UNIQUE NOT NULL,
    zodiac_sign VARCHAR(20) NOT NULL,
    preferred_language VARCHAR(5) DEFAULT 'en',
    coaching_style VARCHAR(50) DEFAULT 'balanced', -- supportive, direct, gentle, motivational
    focus_areas JSONB DEFAULT '[]'::jsonb, -- ['relationships', 'career', 'personal_growth']
    communication_preferences JSONB DEFAULT '{}'::jsonb,
    timezone VARCHAR(50),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Create conversation analytics table
CREATE TABLE IF NOT EXISTS coach_conversation_analytics (
    id SERIAL PRIMARY KEY,
    user_id VARCHAR(255),
    conversation_id INTEGER REFERENCES coach_conversations(id),
    scenario VARCHAR(50),
    satisfaction_rating INTEGER CHECK (satisfaction_rating >= 1 AND satisfaction_rating <= 5),
    helpful BOOLEAN,
    follow_up_requested BOOLEAN DEFAULT FALSE,
    feedback TEXT,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create coach performance metrics table
CREATE TABLE IF NOT EXISTS coach_performance_metrics (
    id SERIAL PRIMARY KEY,
    date DATE DEFAULT CURRENT_DATE,
    total_conversations INTEGER DEFAULT 0,
    unique_users INTEGER DEFAULT 0,
    avg_response_time_ms DECIMAL(10,2),
    avg_quality_score DECIMAL(3,2),
    total_tokens_used INTEGER DEFAULT 0,
    cache_hit_rate DECIMAL(5,2),
    scenario_breakdown JSONB DEFAULT '{}'::jsonb,
    error_count INTEGER DEFAULT 0,
    satisfaction_rating DECIMAL(3,2),
    created_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(date)
);

-- Add indexes for optimal query performance
CREATE INDEX IF NOT EXISTS idx_coach_conversations_user_id ON coach_conversations(user_id);
CREATE INDEX IF NOT EXISTS idx_coach_conversations_created_at ON coach_conversations(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_coach_conversations_scenario ON coach_conversations(scenario);
CREATE INDEX IF NOT EXISTS idx_coach_conversations_user_time ON coach_conversations(user_id, created_at DESC);
CREATE INDEX IF NOT EXISTS idx_coach_conversations_quality ON coach_conversations(quality_score);

CREATE INDEX IF NOT EXISTS idx_coach_user_prefs_user_id ON coach_user_preferences(user_id);
CREATE INDEX IF NOT EXISTS idx_coach_user_prefs_zodiac ON coach_user_preferences(zodiac_sign);

CREATE INDEX IF NOT EXISTS idx_coach_analytics_user_id ON coach_conversation_analytics(user_id);
CREATE INDEX IF NOT EXISTS idx_coach_analytics_conversation ON coach_conversation_analytics(conversation_id);
CREATE INDEX IF NOT EXISTS idx_coach_analytics_created_at ON coach_conversation_analytics(created_at DESC);

CREATE INDEX IF NOT EXISTS idx_coach_metrics_date ON coach_performance_metrics(date DESC);

-- Add GIN indexes for JSONB columns
CREATE INDEX IF NOT EXISTS idx_coach_user_prefs_focus_areas_gin ON coach_user_preferences USING GIN (focus_areas);
CREATE INDEX IF NOT EXISTS idx_coach_user_prefs_comm_prefs_gin ON coach_user_preferences USING GIN (communication_preferences);
CREATE INDEX IF NOT EXISTS idx_coach_metrics_breakdown_gin ON coach_performance_metrics USING GIN (scenario_breakdown);

-- Create views for common queries
CREATE OR REPLACE VIEW v_recent_coach_conversations AS
SELECT 
    c.id,
    c.user_id,
    c.scenario,
    c.quality_score,
    c.tokens_used,
    c.model_used,
    c.zodiac_sign,
    c.language_code,
    c.created_at,
    p.coaching_style,
    p.preferred_language
FROM coach_conversations c
LEFT JOIN coach_user_preferences p ON c.user_id = p.user_id
WHERE c.created_at > NOW() - INTERVAL '7 days'
ORDER BY c.created_at DESC;

CREATE OR REPLACE VIEW v_coach_user_stats AS
SELECT 
    user_id,
    zodiac_sign,
    COUNT(*) as total_conversations,
    AVG(quality_score) as avg_quality_score,
    SUM(tokens_used) as total_tokens_used,
    MIN(created_at) as first_conversation,
    MAX(created_at) as last_conversation,
    COUNT(DISTINCT scenario) as scenarios_used,
    STRING_AGG(DISTINCT scenario, ', ') as popular_scenarios
FROM coach_conversations
WHERE created_at > NOW() - INTERVAL '30 days'
GROUP BY user_id, zodiac_sign
ORDER BY total_conversations DESC;

CREATE OR REPLACE VIEW v_coach_daily_metrics AS
SELECT 
    DATE(created_at) as date,
    COUNT(*) as conversations,
    COUNT(DISTINCT user_id) as unique_users,
    AVG(quality_score) as avg_quality,
    AVG(tokens_used) as avg_tokens,
    COUNT(*) FILTER (WHERE cached = true) as cached_responses,
    ROUND(
        (COUNT(*) FILTER (WHERE cached = true) * 100.0 / COUNT(*)), 2
    ) as cache_hit_rate,
    scenario,
    COUNT(*) as scenario_count
FROM coach_conversations
WHERE created_at > NOW() - INTERVAL '30 days'
GROUP BY DATE(created_at), scenario
ORDER BY date DESC, scenario_count DESC;

-- Add constraints and triggers
ALTER TABLE coach_conversations 
ADD CONSTRAINT check_quality_score CHECK (quality_score >= 0.0 AND quality_score <= 1.0);

ALTER TABLE coach_conversations 
ADD CONSTRAINT check_tokens_used CHECK (tokens_used >= 0);

-- Create trigger for updated_at timestamps
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_coach_conversations_updated_at BEFORE UPDATE ON coach_conversations 
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_coach_user_preferences_updated_at BEFORE UPDATE ON coach_user_preferences 
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Insert sample coaching scenarios for reference
INSERT INTO coach_conversations (user_id, user_message, ai_response, scenario, quality_score, zodiac_sign, language_code)
VALUES 
('sample_user_1', 'I need advice about my career', 'Sample AI coaching response about career guidance', 'career', 0.85, 'Leo', 'en'),
('sample_user_2', 'How can I improve my relationships?', 'Sample AI coaching response about relationships', 'relationships', 0.90, 'Cancer', 'en')
ON CONFLICT DO NOTHING;

-- Create function to update daily metrics
CREATE OR REPLACE FUNCTION update_coach_daily_metrics()
RETURNS VOID AS $$
DECLARE
    metrics_date DATE := CURRENT_DATE;
    total_convs INTEGER;
    unique_users_count INTEGER;
    avg_response_time DECIMAL(10,2);
    avg_quality DECIMAL(3,2);
    total_tokens INTEGER;
    cache_hits INTEGER;
    total_responses INTEGER;
    cache_rate DECIMAL(5,2);
    scenario_data JSONB;
    error_count INTEGER;
BEGIN
    -- Calculate metrics for today
    SELECT 
        COUNT(*),
        COUNT(DISTINCT user_id),
        AVG(response_time_ms),
        AVG(quality_score),
        SUM(tokens_used)
    INTO total_convs, unique_users_count, avg_response_time, avg_quality, total_tokens
    FROM coach_conversations
    WHERE DATE(created_at) = metrics_date;

    -- Calculate cache hit rate
    SELECT 
        COUNT(*) FILTER (WHERE cached = true),
        COUNT(*)
    INTO cache_hits, total_responses
    FROM coach_conversations
    WHERE DATE(created_at) = metrics_date;
    
    cache_rate := CASE WHEN total_responses > 0 THEN (cache_hits * 100.0 / total_responses) ELSE 0 END;

    -- Get scenario breakdown
    SELECT jsonb_object_agg(scenario, scenario_count)
    INTO scenario_data
    FROM (
        SELECT scenario, COUNT(*) as scenario_count
        FROM coach_conversations
        WHERE DATE(created_at) = metrics_date
        GROUP BY scenario
    ) s;

    -- Insert or update metrics
    INSERT INTO coach_performance_metrics (
        date, total_conversations, unique_users, avg_response_time_ms, 
        avg_quality_score, total_tokens_used, cache_hit_rate, scenario_breakdown
    )
    VALUES (
        metrics_date, total_convs, unique_users_count, avg_response_time,
        avg_quality, total_tokens, cache_rate, COALESCE(scenario_data, '{}'::jsonb)
    )
    ON CONFLICT (date) DO UPDATE SET
        total_conversations = EXCLUDED.total_conversations,
        unique_users = EXCLUDED.unique_users,
        avg_response_time_ms = EXCLUDED.avg_response_time_ms,
        avg_quality_score = EXCLUDED.avg_quality_score,
        total_tokens_used = EXCLUDED.total_tokens_used,
        cache_hit_rate = EXCLUDED.cache_hit_rate,
        scenario_breakdown = EXCLUDED.scenario_breakdown,
        created_at = NOW();
END;
$$ LANGUAGE plpgsql;

-- Add comments for documentation
COMMENT ON TABLE coach_conversations IS 'Stores all AI coach conversations with users for context and analytics';
COMMENT ON TABLE coach_user_preferences IS 'User preferences for AI coaching style and personalization';
COMMENT ON TABLE coach_conversation_analytics IS 'User feedback and satisfaction metrics for conversations';
COMMENT ON TABLE coach_performance_metrics IS 'Daily aggregated performance metrics for the AI coach service';

COMMENT ON VIEW v_recent_coach_conversations IS 'Recent conversations with user preferences joined';
COMMENT ON VIEW v_coach_user_stats IS 'Per-user conversation statistics and usage patterns';
COMMENT ON VIEW v_coach_daily_metrics IS 'Daily conversation metrics broken down by scenario';

-- Grant permissions (adjust as needed for your security model)
-- GRANT SELECT, INSERT, UPDATE ON coach_conversations TO coach_api_user;
-- GRANT SELECT, INSERT, UPDATE ON coach_user_preferences TO coach_api_user;
-- GRANT SELECT, INSERT ON coach_conversation_analytics TO coach_api_user;
-- GRANT SELECT ON coach_performance_metrics TO coach_api_user;